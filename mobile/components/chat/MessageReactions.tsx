import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Modal,
  FlatList,
  Dimensions,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import { COLORS, FONTS, SIZES } from '../../constants/theme';

/**
 * Î¶¨Ïï°ÏÖò Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
 * @interface Reaction
 */
interface Reaction {
  /** Ïù¥Î™®ÏßÄ */
  emoji: string;
  /** Î¶¨Ïï°ÏÖò Ïàò */
  count: number;
  /** Î¶¨Ïï°ÏÖòÌïú ÏÇ¨Ïö©Ïûê ID Î™©Î°ù */
  userIds: string[];
  /** ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Î¶¨Ïï°ÏÖòÌñàÎäîÏßÄ Ïó¨Î∂Ä */
  hasReacted: boolean;
}

/**
 * MessageReactions Ïª¥Ìè¨ÎÑåÌä∏ Props
 * @interface MessageReactionsProps
 */
interface MessageReactionsProps {
  /** Î¶¨Ïï°ÏÖò Î™©Î°ù */
  reactions: Reaction[];
  /** Î¶¨Ïï°ÏÖò Ï∂îÍ∞Ä Ìï∏Îì§Îü¨ */
  onAddReaction: (emoji: string) => void;
  /** Î¶¨Ïï°ÏÖò Ï†úÍ±∞ Ìï∏Îì§Îü¨ */
  onRemoveReaction: (emoji: string) => void;
  /** ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID */
  currentUserId: string;
}

const QUICK_REACTIONS = ['‚ù§Ô∏è', 'üëç', 'üòä', 'üòÇ', 'üòÆ', 'üò¢', 'üôè', 'üëè'];

const ALL_REACTIONS = [
  { category: 'expressions', emojis: ['üòä', 'üòÇ', 'ü•∞', 'üòç', 'üòé', 'üò¢', 'üò≠', 'üò§', 'üòÆ', 'üò±'] },
  { category: 'gestures', emojis: ['üëç', 'üëé', 'üëè', 'üôè', 'ü§ù', '‚úåÔ∏è', 'ü§ü', 'ü§ô', 'üí™', 'üôå'] },
  { category: 'hearts', emojis: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'üíï', 'üíñ'] },
  { category: 'others', emojis: ['üî•', 'üíØ', '‚ú®', 'üéâ', 'üéä', 'üåü', '‚≠ê', 'üåà', '‚òÄÔ∏è', 'üåô'] },
];

/**
 * Î©îÏãúÏßÄ Î¶¨Ïï°ÏÖò Ïª¥Ìè¨ÎÑåÌä∏ - Î©îÏãúÏßÄÏóê ÎåÄÌïú Ïù¥Î™®ÏßÄ Î¶¨Ïï°ÏÖò Í¥ÄÎ¶¨
 * @component
 * @param {MessageReactionsProps} props - Ïª¥Ìè¨ÎÑåÌä∏ ÏÜçÏÑ±
 * @returns {JSX.Element} Î©îÏãúÏßÄ Î¶¨Ïï°ÏÖò UI
 * @description Î©îÏãúÏßÄÏóê Ïù¥Î™®ÏßÄ Î¶¨Ïï°ÏÖòÏùÑ Ï∂îÍ∞Ä/Ï†úÍ±∞ÌïòÍ≥† ÌëúÏãúÌïòÎäî Ïª¥Ìè¨ÎÑåÌä∏
 */
export const MessageReactions= ({
  reactions,
  onAddReaction,
  onRemoveReaction,
  currentUserId,
}) => {
  const [showAllReactions, setShowAllReactions] = useState(false);
  const { t } = useTranslation(['chat']);

  /**
   * Î¶¨Ïï°ÏÖò ÌÑ∞Ïπò Ìï∏Îì§Îü¨
   * @param {Reaction} reaction - Î¶¨Ïï°ÏÖò Í∞ùÏ≤¥
   * @returns {void}
   */
  const handleReactionPress = (reaction: Reaction) => {
    if (reaction.hasReacted) {
      onRemoveReaction(reaction.emoji);
    } else {
      onAddReaction(reaction.emoji);
    }
  };

  /**
   * Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù Ìï∏Îì§Îü¨
   * @param {string} emoji - ÏÑ†ÌÉùÌïú Ïù¥Î™®ÏßÄ
   * @returns {void}
   */
  const handleEmojiSelect = (emoji: string) => {
    onAddReaction(emoji);
    setShowAllReactions(false);
  };

  /**
   * Í∞úÎ≥Ñ Î¶¨Ïï°ÏÖò Î†åÎçîÎßÅ
   * @param {Reaction} reaction - Î¶¨Ïï°ÏÖò Í∞ùÏ≤¥
   * @returns {JSX.Element} Î¶¨Ïï°ÏÖò Î≤ÑÌäº UI
   */
  const renderReaction = (reaction: Reaction) => (
    <TouchableOpacity
      key={reaction.emoji}
      style={[
        styles.reactionBubble,
        reaction.hasReacted && styles.reactionBubbleActive,
      ]}
      onPress={() => handleReactionPress(reaction)}
    >
      <Text style={styles.reactionEmoji}>{reaction.emoji}</Text>
      {reaction.count > 1 && (
        <Text style={[
          styles.reactionCount,
          reaction.hasReacted && styles.reactionCountActive,
        ]}>
          {reaction.count}
        </Text>
      )}
    </TouchableOpacity>
  );

  return (
    <>
      <View style={styles.container}>
        {reactions.map(renderReaction)}
        
        <TouchableOpacity
          style={styles.addReactionButton}
          onPress={() => setShowAllReactions(true)}
        >
          <Text style={styles.addReactionText}>+</Text>
        </TouchableOpacity>
      </View>

      {/* Ï†ÑÏ≤¥ Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù Î™®Îã¨ */}
      <Modal
        visible={showAllReactions}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowAllReactions(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowAllReactions(false)}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{t('reactions.addReaction')}</Text>
            </View>

            {/* Îπ†Î•∏ ÏÑ†ÌÉù */}
            <View style={styles.quickReactionsContainer}>
              {QUICK_REACTIONS.map((emoji) => (
                <TouchableOpacity
                  key={emoji}
                  style={styles.quickReactionButton}
                  onPress={() => handleEmojiSelect(emoji)}
                >
                  <Text style={styles.quickReactionEmoji}>{emoji}</Text>
                </TouchableOpacity>
              ))}
            </View>

            {/* Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ïù¥Î™®ÏßÄ */}
            <FlatList
              data={ALL_REACTIONS}
              keyExtractor={(item) => item.category}
              renderItem={({ item }) => (
                <View style={styles.categoryContainer}>
                  <Text style={styles.categoryTitle}>{t(`reactions.categories.${item.category}`)}</Text>
                  <View style={styles.emojiGrid}>
                    {item.emojis.map((emoji) => (
                      <TouchableOpacity
                        key={emoji}
                        style={styles.emojiButton}
                        onPress={() => handleEmojiSelect(emoji)}
                      >
                        <Text style={styles.emoji}>{emoji}</Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>
              )}
            />
          </View>
        </TouchableOpacity>
      </Modal>
    </>
  );
};

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: SIZES.base / 2,
    marginHorizontal: -2,
  },
  reactionBubble: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.lightGray,
    paddingHorizontal: SIZES.base,
    paddingVertical: 4,
    borderRadius: 12,
    marginHorizontal: 2,
    marginVertical: 2,
  },
  reactionBubbleActive: {
    backgroundColor: COLORS.primaryLight,
    borderWidth: 1,
    borderColor: COLORS.primary,
  },
  reactionEmoji: {
    fontSize: 14,
  },
  reactionCount: {
    ...FONTS.body5,
    color: COLORS.gray,
    marginLeft: 4,
  },
  reactionCountActive: {
    color: COLORS.primary,
    fontWeight: '600',
  },
  addReactionButton: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: COLORS.lightGray,
    justifyContent: 'center',
    alignItems: 'center',
    marginHorizontal: 2,
    marginVertical: 2,
  },
  addReactionText: {
    fontSize: 16,
    color: COLORS.gray,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: COLORS.white,
    borderTopLeftRadius: SIZES.radius * 2,
    borderTopRightRadius: SIZES.radius * 2,
    maxHeight: '70%',
    paddingBottom: 20,
  },
  modalHeader: {
    alignItems: 'center',
    paddingVertical: SIZES.padding,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.lightGray,
  },
  modalTitle: {
    ...FONTS.h3,
    color: COLORS.black,
  },
  quickReactionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingVertical: SIZES.padding,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.lightGray,
  },
  quickReactionButton: {
    padding: SIZES.base,
  },
  quickReactionEmoji: {
    fontSize: 28,
  },
  categoryContainer: {
    paddingHorizontal: SIZES.padding,
    paddingVertical: SIZES.padding,
  },
  categoryTitle: {
    ...FONTS.body3,
    color: COLORS.gray,
    marginBottom: SIZES.base,
  },
  emojiGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  emojiButton: {
    width: (width - SIZES.padding * 2) / 8,
    aspectRatio: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emoji: {
    fontSize: 24,
  },
});