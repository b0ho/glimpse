/**
 * Google Authentication Hook
 *
 * @module hooks/auth/useGoogleAuth
 * @description Google OAuth Ïù∏Ï¶ùÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ïª§Ïä§ÌÖÄ ÌõÖÏûÖÎãàÎã§.
 * Clerk OAuthÎ•º ÏÇ¨Ïö©ÌïòÎ©∞, Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî Îπ†Î•∏ Î°úÍ∑∏Ïù∏ÏùÑ ÏßÄÏõêÌï©ÎãàÎã§.
 */

import { useState } from 'react';
import { Alert, Platform } from 'react-native';
import { useOAuth } from '@clerk/clerk-expo';
import { useAuthStore } from '@/store/slices/authSlice';
import { useAndroidSafeTranslation } from '@/hooks/useAndroidSafeTranslation';
import { OAuthUserInfo } from '@/types/auth.types';

/**
 * Íµ¨Í∏Ä Ïù∏Ï¶ù ÌõÖ
 *
 * @hook
 * @param {Function} onAuthCompleted - Ïù∏Ï¶ù ÏôÑÎ£å ÏΩúÎ∞± Ìï®Ïàò
 * @returns {Object} Google Ïù∏Ï¶ù Í¥ÄÎ†® ÏÉÅÌÉú Î∞è Ìï®ÏàòÎì§
 * @returns {boolean} returns.isGoogleLoading - Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏßÑÌñâ Ï§ë Ïó¨Î∂Ä
 * @returns {Function} returns.handleGoogleLogin - Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ìï∏Îì§Îü¨
 * @returns {Function} returns.handleQuickDevLogin - Í∞úÎ∞ú ÌôòÍ≤Ω Îπ†Î•∏ Î°úÍ∑∏Ïù∏ Ìï∏Îì§Îü¨
 *
 * @description
 * Google OAuth Ïù∏Ï¶ù ÌîåÎ°úÏö∞Î•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
 * - ÌîÑÎ°úÎçïÏÖò: Clerk OAuth ÏÇ¨Ïö©
 * - Í∞úÎ∞ú ÌôòÍ≤Ω: Îπ†Î•∏ Î°úÍ∑∏Ïù∏ ÏßÄÏõê (OAuth Ïö∞Ìöå)
 * - ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ï≤òÎ¶¨ (Cloudflare Îì±)
 * - ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏûêÎèô Îß§Ìïë
 *
 * @example
 * ```tsx
 * const { isGoogleLoading, handleGoogleLogin } = useGoogleAuth(() => {
 *   console.log('Ïù∏Ï¶ù ÏôÑÎ£å!');
 *   navigation.navigate('Home');
 * });
 *
 * // Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
 * <Button
 *   onPress={handleGoogleLogin}
 *   loading={isGoogleLoading}
 *   title="GoogleÎ°ú Î°úÍ∑∏Ïù∏"
 * />
 * ```
 */
export const useGoogleAuth = (onAuthCompleted: () => void) => {
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);
  const { startOAuthFlow } = useOAuth({ strategy: 'oauth_google' });
  const { setUser } = useAuthStore();
  const { t } = useAndroidSafeTranslation('auth');
  
  /**
   * Í∞úÎ∞ú ÌôòÍ≤Ω Îπ†Î•∏ Î°úÍ∑∏Ïù∏
   */
  const handleQuickDevLogin = (isPremium: boolean = false) => {
    const mockUser = {
      id: isPremium ? 'premium_user_id' : 'dev_user_id',
      nickname: isPremium ? 'ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌÖåÏä§ÌÑ∞' : 'Í∞úÎ∞ú ÌÖåÏä§ÌÑ∞',
      email: isPremium ? 'premium@test.com' : 'dev@test.com',
      anonymousId: `anon_${isPremium ? 'premium' : 'dev'}`,
      phoneNumber: '',
      isVerified: true,
      credits: isPremium ? 999 : 5,
      isPremium,
      lastActive: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
      currentMode: 'DATING' as any,
    };
    
    setUser(mockUser);
    onAuthCompleted();
  };
  
  /**
   * OAuth ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ïï± ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î°ú Î≥ÄÌôò
   */
  const createUserFromOAuth = (userInfo: OAuthUserInfo, sessionId: string) => {
    return {
      id: userInfo.id || sessionId,
      email: userInfo.email || '',
      nickname: userInfo.nickname || 
                `${userInfo.firstName || ''} ${userInfo.lastName || ''}`.trim() || 
                t('fallbackUser.googleUser'),
      anonymousId: `anon_${userInfo.id || sessionId}`,
      phoneNumber: '',
      isVerified: true,
      profileImageUrl: userInfo.profileImageUrl,
      credits: 0,
      isPremium: false,
      lastActive: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
      currentMode: 'DATING' as any,
    };
  };
  
  /**
   * Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ìï∏Îì§Îü¨
   */
  const handleGoogleLogin = async (): Promise<void> => {
    console.log('üü° Google login button clicked (Clerk OAuth)');
    
    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎäî OAuth Ïö∞Ìöå
    if (__DEV__) {
      console.log('üîß Í∞úÎ∞ú Î™®Îìú Í∞êÏßÄ - OAuth Ïö∞ÌöåÌïòÍ≥† ÌîÑÎ¶¨ÎØ∏ÏóÑ Í≥ÑÏ†ïÏúºÎ°ú ÏßÅÏ†ë Î°úÍ∑∏Ïù∏');
      return handleQuickDevLogin(true);
    }
    
    setIsGoogleLoading(true);
    
    try {
      const result = await startOAuthFlow();
      
      if (!result) {
        console.log('‚ùå OAuth ÌîåÎ°úÏö∞ Ï∑®ÏÜåÎê®');
        return;
      }
      
      const { createdSessionId, signIn, signUp, setActive } = result;
      
      if (createdSessionId && setActive) {
        console.log('‚úÖ Clerk OAuth Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', createdSessionId);
        
        // ÏÑ∏ÏÖò ÌôúÏÑ±Ìôî
        await setActive({ session: createdSessionId });
        
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const userInfo = signIn || signUp;
        if (userInfo) {
          const userData = createUserFromOAuth({
            id: userInfo.id,
            email: (userInfo as any).emailAddress,
            firstName: (userInfo as any).firstName,
            lastName: (userInfo as any).lastName,
            profileImageUrl: (userInfo as any).imageUrl,
          }, createdSessionId);
          
          setUser(userData);
          
          Alert.alert(
            t('alerts.loginSuccess.title'),
            t('alerts.loginSuccess.messageWithName', { nickname: userData.nickname }),
            [
              {
                text: t('alerts.loginSuccess.confirm'),
                onPress: () => onAuthCompleted(),
              }
            ]
          );
        } else {
          // Fallback ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
          const fallbackUser = createUserFromOAuth({}, createdSessionId);
          setUser(fallbackUser);
          
          Alert.alert(
            t('alerts.loginSuccess.title'),
            t('alerts.loginSuccess.messageDefault'),
            [
              {
                text: t('alerts.loginSuccess.confirm'),
                onPress: () => onAuthCompleted(),
              }
            ]
          );
        }
      } else {
        Alert.alert(
          t('alerts.loginFailure.title'), 
          t('alerts.loginFailure.messageOauth'),
          [{ text: t('alerts.loginFailure.confirm') }]
        );
      }
    } catch (error: any) {
      console.error('üî• Clerk Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏòàÏô∏:', error);
      
      // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ï≤òÎ¶¨
      if (error.message?.includes('401') || error.message?.includes('cloudflare')) {
        console.log('üîß Cloudflare Ïò§Î•ò Í∞êÏßÄ, Í∞úÎ∞ú ÌôòÍ≤Ω fallback Ï†ÅÏö©');
        
        if (process.env.NODE_ENV === 'development') {
          const fallbackUser = createUserFromOAuth({
            nickname: t('fallbackUser.fallbackUser'),
          }, 'fallback_google_user');
          
          setUser(fallbackUser);
          
          Alert.alert(
            t('alerts.devMode.title'),
            t('alerts.devMode.message'),
            [
              {
                text: t('alerts.devMode.confirm'),
                onPress: () => onAuthCompleted(),
              }
            ]
          );
        } else {
          Alert.alert(
            t('alerts.loginFailure.messageNetwork'), 
            t('alerts.loginFailure.messageNetworkDescription')
          );
        }
      } else {
        Alert.alert(
          t('alerts.loginFailure.messageGeneral'), 
          error.message || t('alerts.loginFailure.messageGeneralDescription')
        );
      }
    } finally {
      setIsGoogleLoading(false);
    }
  };
  
  return {
    isGoogleLoading,
    handleGoogleLogin,
    handleQuickDevLogin,
  };
};