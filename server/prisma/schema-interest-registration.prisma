// 통합된 관심 등록 시스템 스키마
// 모든 개인정보는 암호화되어 저장됨

// 등록 유형 (내 정보 vs 찾는 정보)
enum RegistrationType {
  MY_INFO        // 내 정보 등록
  LOOKING_FOR    // 찾는 정보 등록
}

// 매칭 상태
enum MatchPairStatus {
  PENDING        // 매칭 대기 (상대 확인 필요)
  CONFIRMED      // 양쪽 확인 완료
  CHATTING       // 채팅 중
  EXPIRED        // 만료
  REJECTED       // 거절됨
}

// 통합된 관심 등록 모델
model InterestRegistration {
  id                String           @id @default(cuid())
  userId            String
  
  // 등록 구분
  registrationType  RegistrationType // MY_INFO or LOOKING_FOR
  type              InterestType     // PHONE, EMAIL, COMPANY 등
  status            SearchStatus     @default(ACTIVE)
  
  // 관계 의도
  relationshipIntent RelationshipIntent @default(ROMANTIC)
  
  // === 암호화된 해시 필드 (매칭용) ===
  primaryHash       String           // 주 검색값의 해시
  secondaryHash     String?          // 보조 해시 (복합 조건)
  tertiaryHash      String?          // 3차 해시
  
  // === 암호화된 개인정보 (AES-256-GCM) ===
  // 모든 개인정보는 encryptedData 필드에 암호화되어 저장
  encryptedData     String           // 암호화된 JSON 데이터
  encryptedIV       String           // 초기화 벡터
  encryptedTag      String           // 인증 태그
  
  // === 마스킹된 표시값 (UI용 - 비암호화) ===
  displayValue      String           // 마스킹된 표시값 (010-****-1234)
  
  // === 검색/필터용 비식별 정보 (비암호화) ===
  // 전화번호 타입
  phoneCountryCode  String?          // +82 (국가코드만)
  phoneLastDigits   String?          // 뒤 4자리만 (부분 매칭용)
  
  // 이메일 타입
  emailDomain       String?          // gmail.com (도메인만)
  emailFirstChar    String?          // 첫 글자만
  
  // 소셜 타입
  socialPlatform    String?          // instagram, kakao (플랫폼명만)
  
  // 생년월일 타입
  birthYear         Int?             // 연도만
  ageRange          String?          // 20대, 30대 (연령대)
  
  // 위치 타입
  locationCity      String?          // 시/구 레벨만
  locationRadius    Int?             // 반경 (미터)
  
  // 그룹/조직 타입
  groupId           String?          // 그룹 ID (참조용)
  companyDomain     String?          // 회사 도메인
  schoolName        String?          // 학교명 (공개 정보)
  
  // 알바 타입
  partTimeCategory  String?          // 카페, 편의점 등 (카테고리만)
  
  // 플랫폼/게임 타입
  platformName      String?          // 플랫폼명
  gameTitle         String?          // 게임 타이틀
  
  // === 매칭 관련 ===
  matchedPairs1     MatchedPair[]   @relation("Registration1")
  matchedPairs2     MatchedPair[]   @relation("Registration2")
  
  // === 메타데이터 ===
  deviceId          String?          // 등록한 디바이스 ID (암호화)
  isVerified        Boolean         @default(false) // 인증 여부
  verifiedAt        DateTime?
  verificationMethod String?         // email, sms, document 등
  
  // 쿨다운 및 만료
  cooldownEndsAt    DateTime?        // 쿨다운 종료 시간
  expiresAt         DateTime?        // 만료일 (7일 후)
  
  // 타임스탬프
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // === 복합 유니크 제약 ===
  // 같은 유저가 같은 타입+해시 중복 등록 방지
  @@unique([userId, type, primaryHash, registrationType])
  
  // === 인덱스 최적화 ===
  @@index([type, primaryHash, registrationType, status])  // 매칭 쿼리
  @@index([userId, registrationType, status])             // 내 등록 조회
  @@index([relationshipIntent, status])                   // 관계 유형별
  @@index([emailDomain, status])                         // 이메일 도메인
  @@index([companyDomain, status])                        // 회사 도메인
  @@index([groupId, status])                             // 그룹별
  @@index([expiresAt])                                   // 만료 처리
  @@index([cooldownEndsAt])                              // 쿨다운 처리
  
  @@map("interest_registrations")
}

// 매칭 결과 저장
model MatchedPair {
  id                String   @id @default(cuid())
  
  // 양방향 매칭 정보
  registration1Id   String   // 찾는 사람의 등록 ID
  registration2Id   String   // 찾은 사람의 등록 ID
  
  user1Id           String   // 찾는 사람
  user2Id           String   // 찾은 사람
  
  matchType         InterestType      // 매칭 타입
  matchScore        Int      @default(100) // 매칭 점수
  
  // 상태 관리
  status            MatchPairStatus @default(PENDING)
  user1Confirmed    Boolean  @default(false)
  user2Confirmed    Boolean  @default(false)
  
  // 알림 상태
  user1Notified     Boolean  @default(false)
  user2Notified     Boolean  @default(false)
  
  // 채팅방 연결
  chatRoomId        String?
  chatCreatedAt     DateTime?
  
  // 매칭 메타데이터
  matchMethod       String?   // auto, manual, suggested
  matchReason       String?   // 매칭 이유 설명
  
  // 타임스탬프
  matchedAt         DateTime @default(now())
  confirmedAt       DateTime?
  expiredAt         DateTime?
  rejectedAt        DateTime?
  rejectedBy        String?   // userId of who rejected
  
  // Relations
  registration1     InterestRegistration @relation("Registration1", fields: [registration1Id], references: [id])
  registration2     InterestRegistration @relation("Registration2", fields: [registration2Id], references: [id])
  user1             User     @relation("MatchedUser1", fields: [user1Id], references: [id])
  user2             User     @relation("MatchedUser2", fields: [user2Id], references: [id])
  
  // 유니크 제약
  @@unique([registration1Id, registration2Id])
  
  // 인덱스
  @@index([user1Id, status])
  @@index([user2Id, status])
  @@index([status, matchedAt])
  @@index([chatRoomId])
  
  @@map("matched_pairs")
}

// 암호화 키 관리 (선택적 - 키 로테이션용)
model EncryptionKey {
  id          String   @id @default(cuid())
  keyVersion  Int      @unique
  keyHash     String   // 키의 해시 (키 자체는 저장하지 않음)
  algorithm   String   @default("aes-256-gcm")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  rotatedAt   DateTime?
  
  @@index([keyVersion])
  @@index([isActive])
  @@map("encryption_keys")
}