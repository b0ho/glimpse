// 즉석 모임 기능 수정본 - 완전 익명 시스템
// 기존 schema.prisma에 추가할 내용

// ===== 즉석 모임 관련 (수정본) =====

// 즉석 모임
model InstantMeeting {
  id                String                @id @default(cuid())
  code              String                @unique @db.VarChar(10)
  name              String
  creatorId         String
  location          Json?                 // {lat, lng, address}
  featureCategories String[]              // 사용할 특징 카테고리
  isActive          Boolean               @default(true)
  expiresAt         DateTime
  createdAt         DateTime              @default(now())

  // Relations
  creator           User                  @relation(fields: [creatorId], references: [id])
  participants      InstantParticipant[]
  interests         InstantInterest[]
  matches           InstantMatch[]
  activityLogs      InstantActivityLog[]

  @@index([code])
  @@index([creatorId])
  @@index([expiresAt])
  @@map("instant_meetings")
}

// 즉석 참가자 (프로필 정보 없음)
model InstantParticipant {
  id               String                @id @default(cuid())
  userId           String                // 내부 추적용 (프론트엔드에 노출 안함)
  meetingId        String
  nickname         String                // 모임에서만 사용하는 닉네임
  joinedAt         DateTime              @default(now())
  leftAt           DateTime?
  isActive         Boolean               @default(true)

  // Relations
  user             User                  @relation(fields: [userId], references: [id])
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id])
  sentInterests    InstantInterest[]     @relation("SentInterests")
  matches1         InstantMatch[]        @relation("Participant1")
  matches2         InstantMatch[]        @relation("Participant2")
  messages         InstantMessage[]

  @@unique([userId, meetingId])
  @@index([meetingId, isActive])
  @@map("instant_participants")
}

// 즉석 호감 표현
model InstantInterest {
  id                  String                @id @default(cuid())
  fromParticipantId   String
  meetingId           String
  targetFeatures      Json                  // 구체적 특징 허용
  createdAt           DateTime              @default(now())

  // Relations
  fromParticipant     InstantParticipant    @relation("SentInterests", fields: [fromParticipantId], references: [id], onDelete: Cascade)
  meeting             InstantMeeting        @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([fromParticipantId])
  @@index([meetingId])
  @@map("instant_interests")
}

// 즉석 매칭
model InstantMatch {
  id               String                @id @default(cuid())
  meetingId        String
  participant1Id   String
  participant2Id   String
  chatRoomId       String                @unique @default(cuid())
  matchedAt        DateTime              @default(now())

  // Relations
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  participant1     InstantParticipant    @relation("Participant1", fields: [participant1Id], references: [id])
  participant2     InstantParticipant    @relation("Participant2", fields: [participant2Id], references: [id])
  messages         InstantMessage[]

  @@unique([participant1Id, participant2Id])
  @@index([meetingId])
  @@map("instant_matches")
}

// 즉석 메시지
model InstantMessage {
  id                  String                @id @default(cuid())
  chatRoomId          String
  senderParticipantId String
  content             String                // 암호화된 내용
  messageType         MessageType           @default(TEXT)
  isRead              Boolean               @default(false)
  createdAt           DateTime              @default(now())

  // Relations
  match               InstantMatch          @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  sender              InstantParticipant    @relation(fields: [senderParticipantId], references: [id])

  @@index([chatRoomId])
  @@index([createdAt])
  @@map("instant_messages")
}

// 활동 로그 (분석용)
model InstantActivityLog {
  id               String                @id @default(cuid())
  userId           String                // 내부 추적용
  meetingId        String
  activityType     InstantActivityType
  activityData     Json?                 // 추가 데이터
  createdAt        DateTime              @default(now())

  // Relations
  user             User                  @relation(fields: [userId], references: [id])
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id])

  @@index([userId, meetingId])
  @@index([activityType])
  @@index([createdAt])
  @@map("instant_activity_logs")
}

// 활동 타입 열거형
enum InstantActivityType {
  JOIN                // 모임 참가
  LEAVE               // 모임 나가기
  INTEREST_SENT       // 호감 전송
  MATCH_CREATED       // 매칭 성사
  MESSAGE_SENT        // 메시지 전송
  REPORT              // 신고
  BLOCK               // 차단
}

// 메시지 타입 (기존 활용 또는 새로 정의)
enum MessageType {
  TEXT
  IMAGE
  EMOJI
  SYSTEM
}

// ===== 기존 User 모델에 추가할 관계 =====
// User 모델에 다음 관계 추가:
// instantMeetings      InstantMeeting[]     @relation("creator")
// instantParticipants  InstantParticipant[]
// instantActivityLogs  InstantActivityLog[]