import nodemailer from 'nodemailer';
import sgMail from '@sendgrid/mail';
import { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';
import { logger } from '../utils/logger';
import { createError } from '../middleware/errorHandler';
import { cacheService } from './CacheService';
import { prisma } from "../config/database";

interface EmailOptions {
  to: string;
  subject: string;
  html: string;
  text?: string;
  from?: string;
  attachments?: Array<{
    filename: string;
    content: Buffer | string;
    contentType?: string;
  }>;
}

interface VerificationEmailData {
  userEmail: string;
  companyName: string;
  verificationCode: string;
  expiresInMinutes: number;
}

interface EmailProvider {
  sendEmail(options: EmailOptions): Promise<boolean>;
  checkHealth(): Promise<boolean>;
}

// SMTP Provider (Gmail, Naver, etc.)
class SMTPProvider implements EmailProvider {
  private transporter: nodemailer.Transporter;

  constructor() {
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.gmail.com',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASSWORD
      }
    });
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      const result = await this.transporter.sendMail({
        from: options.from || process.env.SMTP_FROM || 'noreply@glimpse.app',
        to: options.to,
        subject: options.subject,
        html: options.html,
        text: options.text,
        attachments: options.attachments
      });
      logger.info(`Email sent via SMTP: ${result.messageId}`);
      return true;
    } catch (error) {
      logger.error('SMTP email error:', error);
      throw error;
    }
  }

  async checkHealth(): Promise<boolean> {
    try {
      await this.transporter.verify();
      return true;
    } catch {
      return false;
    }
  }
}

// SendGrid Provider
class SendGridProvider implements EmailProvider {
  constructor() {
    const apiKey = process.env.SENDGRID_API_KEY;
    if (!apiKey) {
      throw new Error('SendGrid API key not configured');
    }
    sgMail.setApiKey(apiKey);
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      const msg = {
        to: options.to,
        from: options.from || process.env.SENDGRID_FROM || 'noreply@glimpse.app',
        subject: options.subject,
        text: options.text || '',
        html: options.html,
        attachments: options.attachments?.map(att => ({
          content: typeof att.content === 'string' ? att.content : att.content.toString('base64'),
          filename: att.filename,
          type: att.contentType
        }))
      };

      const response = await sgMail.send(msg);
      logger.info(`Email sent via SendGrid: ${response[0].statusCode}`);
      return true;
    } catch (error) {
      logger.error('SendGrid email error:', error);
      throw error;
    }
  }

  async checkHealth(): Promise<boolean> {
    // SendGrid doesn't have a specific health check endpoint
    return !!process.env.SENDGRID_API_KEY;
  }
}

// AWS SES Provider
class SESProvider implements EmailProvider {
  private client: SESClient;

  constructor() {
    this.client = new SESClient({
      region: process.env.AWS_REGION || 'ap-northeast-2', // Seoul region
      credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!
      }
    });
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    try {
      const command = new SendEmailCommand({
        Source: options.from || process.env.SES_FROM || 'noreply@glimpse.app',
        Destination: {
          ToAddresses: [options.to]
        },
        Message: {
          Subject: {
            Data: options.subject,
            Charset: 'UTF-8'
          },
          Body: {
            Html: {
              Data: options.html,
              Charset: 'UTF-8'
            },
            Text: options.text ? {
              Data: options.text,
              Charset: 'UTF-8'
            } : undefined
          }
        }
      });

      const response = await this.client.send(command);
      logger.info(`Email sent via AWS SES: ${response.MessageId}`);
      return true;
    } catch (error) {
      logger.error('AWS SES email error:', error);
      throw error;
    }
  }

  async checkHealth(): Promise<boolean> {
    return !!(process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY);
  }
}

// Development Provider (console logging)
class DevelopmentProvider implements EmailProvider {
  async sendEmail(options: EmailOptions): Promise<boolean> {
    logger.info('üìß [DEV EMAIL]', {
      to: options.to,
      subject: options.subject,
      preview: options.text?.substring(0, 100) || options.html.substring(0, 100)
    });
    return true;
  }

  async checkHealth(): Promise<boolean> {
    return true;
  }
}

export class EmailService {
  private static instance: EmailService;
  private provider: EmailProvider;
  private readonly rateLimitPerHour = 100;
  private readonly bulkBatchSize = 50;
  private readonly bulkDelayMs = 1000;

  private constructor() {
    // Select provider based on configuration
    const emailProvider = process.env.EMAIL_PROVIDER || 'dev';

    switch (emailProvider) {
      case 'smtp':
        try {
          this.provider = new SMTPProvider();
        } catch {
          logger.warn('Falling back to development email mode');
          this.provider = new DevelopmentProvider();
        }
        break;
      case 'sendgrid':
        try {
          this.provider = new SendGridProvider();
        } catch {
          logger.warn('Falling back to development email mode');
          this.provider = new DevelopmentProvider();
        }
        break;
      case 'ses':
        try {
          this.provider = new SESProvider();
        } catch {
          logger.warn('Falling back to development email mode');
          this.provider = new DevelopmentProvider();
        }
        break;
      default:
        this.provider = new DevelopmentProvider();
    }
  }

  static getInstance(): EmailService {
    if (!EmailService.instance) {
      EmailService.instance = new EmailService();
    }
    return EmailService.instance;
  }

  async sendEmail(options: EmailOptions): Promise<boolean> {
    // Check rate limit
    const rateLimitKey = `email:ratelimit:${options.to}`;
    const sentCount = await cacheService.get<number>(rateLimitKey) || 0;
    
    if (sentCount >= this.rateLimitPerHour) {
      logger.warn(`Email rate limit exceeded for ${options.to}`);
      throw createError(429, 'Ïù¥Î©îÏùº Ï†ÑÏÜ° ÌïúÎèÑÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }

    try {
      const result = await this.provider.sendEmail(options);
      
      if (result) {
        // Update rate limit counter
        await cacheService.set(rateLimitKey, sentCount + 1, { ttl: 3600 });
        
        // Log email activity
        await this.logEmailActivity(options);
      }

      return result;
    } catch (error) {
      logger.error('Failed to send email:', error);
      
      // Don't throw for non-critical emails
      if (!this.isCriticalEmail(options.subject)) {
        return false;
      }
      
      throw error;
    }
  }

  private async logEmailActivity(options: EmailOptions): Promise<void> {
    try {
      await prisma.emailLog.create({
        data: {
          to: options.to,
          subject: options.subject,
          provider: process.env.EMAIL_PROVIDER || 'dev',
          status: 'SENT',
          sent_at: new Date()
        }
      });
    } catch (error) {
      logger.error('Failed to log email activity:', error);
    }
  }

  private isCriticalEmail(subject: string): boolean {
    const criticalKeywords = ['Ïù∏Ï¶ù', 'ÎπÑÎ∞ÄÎ≤àÌò∏', 'Í≤∞Ï†ú', 'Î≥¥Ïïà'];
    return criticalKeywords.some(keyword => subject.includes(keyword));
  }

  async sendCompanyVerificationEmail(data: VerificationEmailData): Promise<boolean> {
    const { userEmail, companyName, verificationCode, expiresInMinutes } = data;

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>ÌöåÏÇ¨ Ïù∏Ï¶ù ÏΩîÎìú</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 8px; margin: 20px 0; }
          .code { font-size: 32px; font-weight: bold; color: #007AFF; text-align: center; letter-spacing: 4px; margin: 20px 0; }
          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
            <h1>${companyName} ÌöåÏÇ¨ Ïù∏Ï¶ù</h1>
          </div>
          
          <div class="content">
            <p>ÏïàÎÖïÌïòÏÑ∏Ïöî!</p>
            <p><strong>${companyName}</strong>ÏóêÏÑú Glimpse ÌöåÏÇ¨ Í∑∏Î£πÏóê Í∞ÄÏûÖÌïòÍ∏∞ ÏúÑÌïú Ïù∏Ï¶ù ÏΩîÎìúÏûÖÎãàÎã§.</p>
            
            <div class="code">${verificationCode}</div>
            
            <p>ÏúÑ Ïù∏Ï¶ù ÏΩîÎìúÎ•º Ïï±Ïóê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.</p>
          </div>
          
          <div class="warning">
            <strong>‚ö†Ô∏è Ï§ëÏöîÏÇ¨Ìï≠:</strong>
            <ul>
              <li>Ïù¥ ÏΩîÎìúÎäî <strong>${expiresInMinutes}Î∂Ñ</strong> ÌõÑÏóê ÎßåÎ£åÎê©ÎãàÎã§</li>
              <li>ÏΩîÎìúÎ•º Îã§Î•∏ ÏÇ¨ÎûåÍ≥º Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî</li>
              <li>ÏöîÏ≤≠ÌïòÏßÄ ÏïäÏùÄ Ïù∏Ï¶ùÏù¥ÎùºÎ©¥ Ïù¥ Ïù¥Î©îÏùºÏùÑ Î¨¥ÏãúÌï¥Ï£ºÏÑ∏Ïöî</li>
            </ul>
          </div>
          
          <div class="footer">
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      Glimpse ÌöåÏÇ¨ Ïù∏Ï¶ù
      
      ${companyName}ÏóêÏÑú Glimpse ÌöåÏÇ¨ Í∑∏Î£πÏóê Í∞ÄÏûÖÌïòÍ∏∞ ÏúÑÌïú Ïù∏Ï¶ù ÏΩîÎìú: ${verificationCode}
      
      Ïù¥ ÏΩîÎìúÎäî ${expiresInMinutes}Î∂Ñ ÌõÑÏóê ÎßåÎ£åÎê©ÎãàÎã§.
      ÏΩîÎìúÎ•º Îã§Î•∏ ÏÇ¨ÎûåÍ≥º Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
      
      Î¨∏Ïùò: support@glimpse.app
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: `[Glimpse] ${companyName} ÌöåÏÇ¨ Ïù∏Ï¶ù ÏΩîÎìú`,
      html,
      text
    });
  }

  async sendWelcomeEmail(userEmail: string, nickname: string): Promise<boolean> {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>GlimpseÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .content { padding: 20px 0; }
          .feature { margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; }
          .cta { text-align: center; margin: 30px 0; }
          .button { display: inline-block; padding: 12px 24px; background: #007AFF; color: white; text-decoration: none; border-radius: 6px; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
            <h1>${nickname}Îãò, ÌôòÏòÅÌï©ÎãàÎã§! üéâ</h1>
          </div>
          
          <div class="content">
            <p>GlimpseÏóê Í∞ÄÏûÖÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! ÏÉàÎ°úÏö¥ ÎßåÎÇ®ÏùÑ ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§.</p>
            
            <div class="feature">
              <h3>üé≠ ÏôÑÏ†ÑÌïú ÏùµÎ™ÖÏÑ±</h3>
              <p>ÏÑúÎ°ú Ï¢ãÏïÑÏöîÎ•º ÎàÑÎ•¥Í∏∞ Ï†ÑÍπåÏßÄÎäî ÏôÑÏ†ÑÌûà ÏùµÎ™ÖÏúºÎ°ú ÏÉÅÎåÄÎ•º ÎßåÎÇ† Ïàò ÏûàÏäµÎãàÎã§.</p>
            </div>
            
            <div class="feature">
              <h3>üè¢ Í∑∏Î£π Í∏∞Î∞ò Îß§Ïπ≠</h3>
              <p>ÌöåÏÇ¨, ÎåÄÌïôÍµê, Ï∑®ÎØ∏ Í∑∏Î£πÏóêÏÑú ÎπÑÏä∑Ìïú Í¥ÄÏã¨ÏÇ¨Î•º Í∞ÄÏßÑ ÏÇ¨ÎûåÎì§Í≥º ÎßåÎÇòÎ≥¥ÏÑ∏Ïöî.</p>
            </div>
            
            <div class="feature">
              <h3>üí¨ ÏïàÏ†ÑÌïú Ï±ÑÌåÖ</h3>
              <p>ÏÑúÎ°ú Îß§Ïπ≠Îêú ÌõÑÏóêÎßå ÎåÄÌôîÎ•º ÏãúÏûëÌï† Ïàò ÏûàÏñ¥ ÎçîÏö± ÏïàÏ†ÑÌï©ÎãàÎã§.</p>
            </div>
            
            <div class="cta">
              <p>ÏßÄÍ∏à Î∞îÎ°ú Ï≤´ Î≤àÏß∏ Í∑∏Î£πÏóê Í∞ÄÏûÖÌï¥Î≥¥ÏÑ∏Ïöî!</p>
              <a href="https://glimpse.app" class="button">Ïï±ÏúºÎ°ú Ïù¥ÎèôÌïòÍ∏∞</a>
            </div>
          </div>
          
          <div class="footer">
            <p>Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî.</p>
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      ${nickname}Îãò, GlimpseÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!
      
      GlimpseÏóê Í∞ÄÏûÖÌï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! ÏÉàÎ°úÏö¥ ÎßåÎÇ®ÏùÑ ÏãúÏûëÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§.
      
      Ï£ºÏöî Í∏∞Îä•:
      - ÏôÑÏ†ÑÌïú ÏùµÎ™ÖÏÑ±: ÏÑúÎ°ú Ï¢ãÏïÑÏöîÎ•º ÎàÑÎ•¥Í∏∞ Ï†ÑÍπåÏßÄÎäî ÏôÑÏ†ÑÌûà ÏùµÎ™Ö
      - Í∑∏Î£π Í∏∞Î∞ò Îß§Ïπ≠: ÌöåÏÇ¨, ÎåÄÌïôÍµê, Ï∑®ÎØ∏ Í∑∏Î£πÏóêÏÑú ÎßåÎÇ®
      - ÏïàÏ†ÑÌïú Ï±ÑÌåÖ: Îß§Ïπ≠Îêú ÌõÑÏóêÎßå ÎåÄÌôî Í∞ÄÎä•
      
      ÏßÄÍ∏à Î∞îÎ°ú Ï≤´ Î≤àÏß∏ Í∑∏Î£πÏóê Í∞ÄÏûÖÌï¥Î≥¥ÏÑ∏Ïöî!
      
      Î¨∏Ïùò: support@glimpse.app
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: '[Glimpse] ÌôòÏòÅÌï©ÎãàÎã§! ÏÉàÎ°úÏö¥ ÎßåÎÇ®ÏùÑ ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî ‚ú®',
      html,
      text
    });
  }

  async sendPasswordResetEmail(userEmail: string, resetToken: string): Promise<boolean> {
    const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 8px; margin: 20px 0; }
          .button { display: inline-block; padding: 12px 24px; background: #007AFF; color: white; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
            <h1>ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï</h1>
          </div>
          
          <div class="content">
            <p>ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÑ ÏöîÏ≤≠ÌïòÏÖ®ÏäµÎãàÎã§.</p>
            <p>ÏïÑÎûò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.</p>
            
            <div style="text-align: center;">
              <a href="${resetUrl}" class="button">ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÌïòÍ∏∞</a>
            </div>
            
            <p>Î≤ÑÌäºÏù¥ ÏûëÎèôÌïòÏßÄ ÏïäÎäîÎã§Î©¥ ÏïÑÎûò ÎßÅÌÅ¨Î•º Î≥µÏÇ¨ÌïòÏó¨ Î∏åÎùºÏö∞Ï†ÄÏóê Î∂ôÏó¨ÎÑ£ÏúºÏÑ∏Ïöî:</p>
            <p style="word-break: break-all; color: #666;">${resetUrl}</p>
          </div>
          
          <div class="warning">
            <strong>‚ö†Ô∏è Î≥¥Ïïà ÏïàÎÇ¥:</strong>
            <ul>
              <li>Ïù¥ ÎßÅÌÅ¨Îäî 1ÏãúÍ∞Ñ ÌõÑÏóê ÎßåÎ£åÎê©ÎãàÎã§</li>
              <li>ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÑ ÏöîÏ≤≠ÌïòÏßÄ ÏïäÏïòÎã§Î©¥ Ïù¥ Ïù¥Î©îÏùºÏùÑ Î¨¥ÏãúÌï¥Ï£ºÏÑ∏Ïöî</li>
              <li>ÎßÅÌÅ¨Î•º Îã§Î•∏ ÏÇ¨ÎûåÍ≥º Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî</li>
            </ul>
          </div>
          
          <div class="footer">
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
      
      ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÑ ÏöîÏ≤≠ÌïòÏÖ®ÏäµÎãàÎã§.
      ÏïÑÎûò ÎßÅÌÅ¨Î•º ÌÅ¥Î¶≠ÌïòÏó¨ ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî:
      
      ${resetUrl}
      
      Î≥¥Ïïà ÏïàÎÇ¥:
      - Ïù¥ ÎßÅÌÅ¨Îäî 1ÏãúÍ∞Ñ ÌõÑÏóê ÎßåÎ£åÎê©ÎãàÎã§
      - ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÑ ÏöîÏ≤≠ÌïòÏßÄ ÏïäÏïòÎã§Î©¥ Ïù¥ Ïù¥Î©îÏùºÏùÑ Î¨¥ÏãúÌï¥Ï£ºÏÑ∏Ïöî
      - ÎßÅÌÅ¨Î•º Îã§Î•∏ ÏÇ¨ÎûåÍ≥º Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî
      
      Î¨∏Ïùò: support@glimpse.app
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: '[Glimpse] ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÏöîÏ≤≠',
      html,
      text
    });
  }

  async sendReportNotificationEmail(reportType: string, reportedUser: string, reason: string, details?: string): Promise<boolean> {
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@glimpse.app';

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>[Ïã†Í≥†] ${reportType} Ïã†Í≥† Ï†ëÏàò</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #dc3545; color: white; padding: 20px; text-align: center; }
          .content { padding: 20px; background: #f8f9fa; }
          .info { background: white; padding: 15px; margin: 10px 0; border-radius: 5px; }
          .footer { text-align: center; padding: 20px; color: #666; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üö® Ïã†Í≥† Ï†ëÏàò ÏïåÎ¶º</h1>
          </div>
          
          <div class="content">
            <div class="info">
              <h3>Ïã†Í≥† Ï†ïÎ≥¥</h3>
              <p><strong>Ïã†Í≥† Ïú†Ìòï:</strong> ${reportType}</p>
              <p><strong>Ïã†Í≥† ÎåÄÏÉÅ:</strong> ${reportedUser}</p>
              <p><strong>Ïã†Í≥† ÏÇ¨Ïú†:</strong> ${reason}</p>
              ${details ? `<p><strong>ÏÉÅÏÑ∏ ÎÇ¥Ïö©:</strong> ${details}</p>` : ''}
              <p><strong>Ïã†Í≥† ÏãúÍ∞Ñ:</strong> ${new Date().toLocaleString('ko-KR')}</p>
            </div>
            
            <div class="info">
              <h3>ÎåÄÏùë ÌïÑÏöî ÏÇ¨Ìï≠</h3>
              <ul>
                <li>Ïã†Í≥† ÎÇ¥Ïö© Í≤ÄÌÜ†</li>
                <li>ÌïÑÏöîÏãú Ï∂îÍ∞Ä Ï°∞ÏÇ¨ ÏßÑÌñâ</li>
                <li>Ï†ïÏ±Ö ÏúÑÎ∞ò Ïó¨Î∂Ä ÌåêÎã®</li>
                <li>Ï†ÅÏ†àÌïú Ï°∞Ïπò ÏãúÌñâ</li>
              </ul>
            </div>
            
            <p style="text-align: center; margin-top: 20px;">
              <a href="${process.env.ADMIN_URL}/reports" style="background: #007AFF; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏</a>
            </p>
          </div>
          
          <div class="footer">
            <p>Glimpse Admin System</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return await this.sendEmail({
      to: adminEmail,
      subject: `[Glimpse Ïã†Í≥†] ${reportType} - ${reason}`,
      html
    });
  }

  async sendSubscriptionRenewalReminder(userEmail: string, nickname: string, expiresAt: Date): Promise<boolean> {
    const daysLeft = Math.ceil((expiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖ ÎßåÎ£å ÏïàÎÇ¥</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 8px; margin: 20px 0; }
          .button { display: inline-block; padding: 12px 24px; background: #007AFF; color: white; text-decoration: none; border-radius: 6px; margin: 20px 0; }
          .expiry { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; margin: 20px 0; text-align: center; }
          .benefits { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
            <h1>ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖ ÎßåÎ£å ÏòàÏ†ï</h1>
          </div>
          
          <div class="content">
            <p>${nickname}Îãò, ÏïàÎÖïÌïòÏÑ∏Ïöî!</p>
            <p>Í∑ÄÌïòÏùò Glimpse ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖÏù¥ Í≥ß ÎßåÎ£åÎê©ÎãàÎã§.</p>
            
            <div class="expiry">
              <h2>üîî ÎßåÎ£åÍπåÏßÄ ${daysLeft}Ïùº ÎÇ®ÏïòÏäµÎãàÎã§</h2>
              <p>ÎßåÎ£åÏùº: ${expiresAt.toLocaleDateString('ko-KR')}</p>
            </div>
            
            <div class="benefits">
              <h3>ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌòúÌÉùÏùÑ Í≥ÑÏÜç ÎàÑÎ¶¨ÏÑ∏Ïöî!</h3>
              <ul>
                <li>‚ú® Î¨¥Ï†úÌïú Ï¢ãÏïÑÏöî</li>
                <li>üëÄ Ï¢ãÏïÑÏöî Î∞õÏùÄ ÏÇ¨Îûå ÌôïÏù∏</li>
                <li>üöÄ Ïö∞ÏÑ† Îß§Ïπ≠</li>
                <li>‚Ü©Ô∏è Ï¢ãÏïÑÏöî ÎêòÎèåÎ¶¨Í∏∞</li>
                <li>üíù ÏäàÌçº Ï¢ãÏïÑÏöî</li>
                <li>‚úì ÏùΩÏùå ÌëúÏãú</li>
                <li>üü¢ Ïò®ÎùºÏù∏ ÏÉÅÌÉú ÌëúÏãú</li>
                <li>‚≠ê ÌîÑÎ¶¨ÎØ∏ÏóÑ Î∞∞ÏßÄ</li>
              </ul>
            </div>
            
            <div style="text-align: center;">
              <a href="https://glimpse.app/premium" class="button">ÏßÄÍ∏à Í∞±Ïã†ÌïòÍ∏∞</a>
            </div>
            
            <p style="text-align: center; color: #666;">
              Íµ¨ÎèÖÏùÑ Í∞±Ïã†ÌïòÏßÄ ÏïäÏúºÎ©¥ ${expiresAt.toLocaleDateString('ko-KR')} Ïù¥ÌõÑ ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌòúÌÉùÏù¥ Ï§ëÎã®Îê©ÎãàÎã§.
            </p>
          </div>
          
          <div class="footer">
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
      ${nickname}Îãò, ÏïàÎÖïÌïòÏÑ∏Ïöî!
      
      Í∑ÄÌïòÏùò Glimpse ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖÏù¥ ${daysLeft}Ïùº ÌõÑ ÎßåÎ£åÎê©ÎãàÎã§.
      ÎßåÎ£åÏùº: ${expiresAt.toLocaleDateString('ko-KR')}
      
      ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌòúÌÉù:
      - Î¨¥Ï†úÌïú Ï¢ãÏïÑÏöî
      - Ï¢ãÏïÑÏöî Î∞õÏùÄ ÏÇ¨Îûå ÌôïÏù∏
      - Ïö∞ÏÑ† Îß§Ïπ≠
      - Ï¢ãÏïÑÏöî ÎêòÎèåÎ¶¨Í∏∞
      - ÏäàÌçº Ï¢ãÏïÑÏöî
      - ÏùΩÏùå ÌëúÏãú
      - Ïò®ÎùºÏù∏ ÏÉÅÌÉú ÌëúÏãú
      - ÌîÑÎ¶¨ÎØ∏ÏóÑ Î∞∞ÏßÄ
      
      ÏßÄÍ∏à Í∞±Ïã†ÌïòÍ∏∞: https://glimpse.app/premium
      
      Î¨∏Ïùò: support@glimpse.app
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: `[Glimpse] ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨ÎèÖÏù¥ ${daysLeft}Ïùº ÌõÑ ÎßåÎ£åÎê©ÎãàÎã§`,
      html,
      text
    });
  }

  async sendMatchNotificationEmail(userEmail: string, userNickname: string, matchedNickname: string, groupName: string): Promise<boolean> {
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>ÏÉàÎ°úÏö¥ Îß§Ïπ≠Ïù¥ ÏÑ±ÏÇ¨ÎêòÏóàÏäµÎãàÎã§!</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .match-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px; border-radius: 12px; text-align: center; margin: 20px 0; }
          .button { display: inline-block; padding: 12px 24px; background: white; color: #667eea; text-decoration: none; border-radius: 6px; margin: 20px 0; font-weight: bold; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
          </div>
          
          <div class="match-card">
            <h1>üéâ Ï∂ïÌïòÌï©ÎãàÎã§!</h1>
            <h2>${matchedNickname}ÎãòÍ≥º Îß§Ïπ≠ÎêòÏóàÏäµÎãàÎã§!</h2>
            <p>${groupName}ÏóêÏÑú ÏÑúÎ°úÏùò ÎßàÏùåÏù¥ ÌÜµÌñàÎÑ§Ïöî!</p>
            <a href="https://glimpse.app/matches" class="button">ÏßÄÍ∏à ÎåÄÌôî ÏãúÏûëÌïòÍ∏∞</a>
          </div>
          
          <div style="text-align: center; padding: 20px;">
            <p>Ïù¥Ï†ú ${matchedNickname}ÎãòÍ≥º ÏûêÏú†Î°≠Í≤å ÎåÄÌôîÎ•º ÎÇòÎàå Ïàò ÏûàÏäµÎãàÎã§.</p>
            <p>Ï¢ãÏùÄ ÎßåÎÇ®Ïù¥ ÎêòÍ∏∞Î•º Î∞îÎûçÎãàÎã§! üíï</p>
          </div>
          
          <div class="footer">
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    return await this.sendEmail({
      to: userEmail,
      subject: `[Glimpse] üéâ ${matchedNickname}ÎãòÍ≥º Îß§Ïπ≠ÎêòÏóàÏäµÎãàÎã§!`,
      html
    });
  }

  async sendBulkEmail(recipients: string[], subject: string, html: string, options?: { text?: string }): Promise<{ sent: number; failed: number }> {
    let sent = 0;
    let failed = 0;
    const failedRecipients: string[] = [];

    const batches = [];
    for (let i = 0; i < recipients.length; i += this.bulkBatchSize) {
      batches.push(recipients.slice(i, i + this.bulkBatchSize));
    }

    for (const batch of batches) {
      const promises = batch.map(async (recipient) => {
        try {
          await this.sendEmail({ 
            to: recipient, 
            subject, 
            html,
            text: options?.text 
          });
          sent++;
        } catch (error) {
          logger.error(`Failed to send bulk email to ${recipient}:`, error);
          failed++;
          failedRecipients.push(recipient);
        }
      });

      await Promise.all(promises);
      
      // Wait between batches to avoid rate limiting
      if (batches.indexOf(batch) < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, this.bulkDelayMs));
      }
    }

    // Log bulk email results
    logger.info(`Bulk email completed: ${sent} sent, ${failed} failed`, {
      subject,
      totalRecipients: recipients.length,
      failedRecipients: failedRecipients.length > 0 ? failedRecipients : undefined
    });

    return { sent, failed };
  }

  async checkHealth(): Promise<{ provider: string; healthy: boolean }> {
    const provider = process.env.EMAIL_PROVIDER || 'dev';
    const healthy = await this.provider.checkHealth();
    
    return { provider, healthy };
  }

  // Backward compatibility methods
  async testEmailConnection(): Promise<boolean> {
    const health = await this.checkHealth();
    return health.healthy;
  }

  async sendVerificationEmail(email: string, verificationCode: string, companyName: string): Promise<boolean> {
    return this.sendCompanyVerificationEmail({
      userEmail: email,
      companyName,
      verificationCode,
      expiresInMinutes: 30
    });
  }

  async sendHrApprovalRequest(
    supervisorEmail: string,
    employeeId: string,
    department: string,
    position: string,
    companyName: string
  ): Promise<boolean> {
    const approvalToken = crypto.randomUUID();
    const approvalUrl = `${process.env.ADMIN_URL}/hr-approval?token=${approvalToken}`;

    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>ÏßÅÏõê Ïù∏Ï¶ù ÏäπÏù∏ ÏöîÏ≤≠</title>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #007AFF; }
          .content { background: #f8f9fa; padding: 30px; border-radius: 8px; margin: 20px 0; }
          .employee-info { background: white; padding: 20px; border-radius: 6px; margin: 20px 0; }
          .button { display: inline-block; padding: 12px 24px; background: #28a745; color: white; text-decoration: none; border-radius: 6px; margin: 10px 5px; }
          .button.reject { background: #dc3545; }
          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üì± Glimpse</div>
            <h1>ÏßÅÏõê Ïù∏Ï¶ù ÏäπÏù∏ ÏöîÏ≤≠</h1>
          </div>
          
          <div class="content">
            <p>ÏïàÎÖïÌïòÏÑ∏Ïöî,</p>
            <p>Glimpse Ïï±ÏóêÏÑú ${companyName} ÏßÅÏõê Ïù∏Ï¶ù ÏöîÏ≤≠Ïù¥ Ï†ëÏàòÎêòÏóàÏäµÎãàÎã§.</p>
            
            <div class="employee-info">
              <h3>ÏßÅÏõê Ï†ïÎ≥¥</h3>
              <p><strong>ÏÇ¨Î≤à:</strong> ${employeeId}</p>
              <p><strong>Î∂ÄÏÑú:</strong> ${department}</p>
              <p><strong>ÏßÅÍ∏â:</strong> ${position || 'ÎØ∏Í∏∞Ïû¨'}</p>
              <p><strong>ÏöîÏ≤≠ ÏãúÍ∞Ñ:</strong> ${new Date().toLocaleString('ko-KR')}</p>
            </div>
            
            <p>Ìï¥Îãπ ÏßÅÏõêÏù¥ Í∑ÄÌïòÏùò ÌöåÏÇ¨Ïóê ÏÜåÏÜçÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ ÏäπÏù∏ ÎòêÎäî Í±∞Î∂ÄÌï¥Ï£ºÏÑ∏Ïöî.</p>
            
            <div style="text-align: center;">
              <a href="${approvalUrl}&action=approve" class="button">ÏäπÏù∏ÌïòÍ∏∞</a>
              <a href="${approvalUrl}&action=reject" class="button reject">Í±∞Î∂ÄÌïòÍ∏∞</a>
            </div>
            
            <p style="text-align: center; color: #666; margin-top: 20px;">
              Ïù¥ ÎßÅÌÅ¨Îäî 48ÏãúÍ∞Ñ ÌõÑÏóê ÎßåÎ£åÎê©ÎãàÎã§.
            </p>
          </div>
          
          <div class="footer">
            <p>Î¨∏Ïùò: support@glimpse.app</p>
            <p>¬© 2025 Glimpse. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // Store approval token in cache
    await cacheService.set(
      `hr-approval:${approvalToken}`,
      { supervisorEmail, employeeId, department, position, companyName },
      { ttl: 172800 } // 48 hours
    );

    return await this.sendEmail({
      to: supervisorEmail,
      subject: `[Glimpse] ${companyName} ÏßÅÏõê Ïù∏Ï¶ù ÏäπÏù∏ ÏöîÏ≤≠`,
      html
    });
  }
}

export const emailService = EmailService.getInstance();