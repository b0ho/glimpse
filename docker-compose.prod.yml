version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: glimpse-postgres
    environment:
      POSTGRES_DB: glimpse
      POSTGRES_USER: ${DB_USER:-glimpse}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U glimpse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: glimpse-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: glimpse-server
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-glimpse}:${DB_PASSWORD}@postgres:5432/glimpse?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      PORT: 8080
      # Copy all other environment variables
      JWT_SECRET: ${JWT_SECRET}
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      # External service keys
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      # Payment services
      TOSS_SECRET_KEY: ${TOSS_SECRET_KEY}
      KAKAO_SECRET_KEY: ${KAKAO_SECRET_KEY}
      KAKAO_CID: ${KAKAO_CID}
      # SMS services
      SMS_PROVIDER: ${SMS_PROVIDER}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      ALIGO_API_KEY: ${ALIGO_API_KEY}
      ALIGO_USER_ID: ${ALIGO_USER_ID}
      ALIGO_SENDER: ${ALIGO_SENDER}
      TOAST_APP_KEY: ${TOAST_APP_KEY}
      TOAST_SECRET_KEY: ${TOAST_SECRET_KEY}
      TOAST_SEND_NO: ${TOAST_SEND_NO}
      # Email services
      EMAIL_PROVIDER: ${EMAIL_PROVIDER}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      # Firebase
      FCM_CREDENTIALS_PATH: ${FCM_CREDENTIALS_PATH}
      # Kakao Maps
      KAKAO_MAPS_API_KEY: ${KAKAO_MAPS_API_KEY}
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: glimpse-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./server/uploads:/var/www/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: glimpse-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: glimpse-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: glimpse-backup
    environment:
      DATABASE_URL: postgresql://${DB_USER:-glimpse}:${DB_PASSWORD}@postgres:5432/glimpse
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BACKUP_BUCKET: ${S3_BACKUP_BUCKET}
    volumes:
      - ./backup/scripts:/scripts:ro
      - backup_temp:/tmp/backup
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backup_temp:

networks:
  default:
    name: glimpse-network