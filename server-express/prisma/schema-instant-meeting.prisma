// 즉석 모임 기능을 위한 추가 스키마
// 기존 schema.prisma에 추가할 내용

// ===== 프로필 시스템 확장 =====

// 프로필 타입별 분리 관리
model UserProfile {
  id               String           @id @default(cuid())
  userId           String
  profileType      ProfileType      // OFFICIAL, CREATED, INSTANT, LOCATION
  groupId          String?          // 특정 그룹과 연결된 경우
  nickname         String
  bio              String?
  profileData      Json?            // 타입별 특화 데이터
  anonymityLevel   AnonymityLevel   @default(PARTIAL)
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  expiresAt        DateTime?        // 즉석 프로필은 24시간 후 만료

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  group            Group?           @relation(fields: [groupId], references: [id])
  instantProfile   InstantProfile?
  activities       ProfileActivity[]

  @@unique([userId, profileType, groupId])
  @@index([userId, profileType])
  @@index([groupId, profileType])
  @@map("user_profiles")
}

enum ProfileType {
  OFFICIAL    // 회사/대학 공식 그룹
  CREATED     // 사용자 생성 그룹
  INSTANT     // 즉석 모임
  LOCATION    // 위치 기반
}

enum AnonymityLevel {
  FULL        // 완전 익명
  PARTIAL     // 부분 공개
  VERIFIED    // 인증된 익명
  REVEALED    // 공개
}

// ===== 즉석 모임 관련 =====

// 즉석 모임
model InstantMeeting {
  id                String            @id @default(cuid())
  code              String            @unique @db.VarChar(10)
  name              String
  creatorId         String
  location          Json?             // {lat, lng, address}
  maxMembers        Int               @default(30)
  featureCategories String[]          // 사용할 특징 카테고리
  customCategories  Json?             // 커스텀 카테고리
  isActive          Boolean           @default(true)
  expiresAt         DateTime
  createdAt         DateTime          @default(now())

  // Relations
  creator           User              @relation(fields: [creatorId], references: [id])
  profiles          InstantProfile[]
  interests         InstantInterest[]
  matches           InstantMatch[]

  @@index([code])
  @@index([creatorId])
  @@index([expiresAt])
  @@map("instant_meetings")
}

// 즉석 프로필
model InstantProfile {
  id               String            @id @default(cuid())
  userProfileId    String            @unique
  meetingId        String
  temporaryId      String            @default(cuid())
  features         Json?             // 사용자 특징 정보
  isActive         Boolean           @default(true)
  joinedAt         DateTime          @default(now())

  // Relations
  userProfile      UserProfile       @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  meeting          InstantMeeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  sentInterests    InstantInterest[] @relation("SentInterests")
  matches1         InstantMatch[]    @relation("InstantProfile1")
  matches2         InstantMatch[]    @relation("InstantProfile2")

  @@unique([userProfileId, meetingId])
  @@index([meetingId, isActive])
  @@map("instant_profiles")
}

// 즉석 호감 표현
model InstantInterest {
  id               String            @id @default(cuid())
  fromProfileId    String
  meetingId        String
  targetFeatures   Json              // 찾는 사람의 특징
  matchedProfiles  String[]          // 매칭된 프로필 ID 목록
  createdAt        DateTime          @default(now())

  // Relations
  fromProfile      InstantProfile    @relation("SentInterests", fields: [fromProfileId], references: [id], onDelete: Cascade)
  meeting          InstantMeeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([fromProfileId])
  @@index([meetingId])
  @@map("instant_interests")
}

// 즉석 매칭
model InstantMatch {
  id               String            @id @default(cuid())
  meetingId        String
  profile1Id       String
  profile2Id       String
  chatRoomId       String?
  revealStatus     Json?             // 단계별 공개 상태
  isRevealed       Boolean           @default(false)
  matchedAt        DateTime          @default(now())

  // Relations
  meeting          InstantMeeting    @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  profile1         InstantProfile    @relation("InstantProfile1", fields: [profile1Id], references: [id])
  profile2         InstantProfile    @relation("InstantProfile2", fields: [profile2Id], references: [id])

  @@unique([profile1Id, profile2Id])
  @@index([meetingId])
  @@map("instant_matches")
}

// ===== 프로필 활동 추적 =====

model ProfileActivity {
  id               String            @id @default(cuid())
  profileId        String
  activityType     String            // VIEW, LIKE, MESSAGE, MATCH
  activityData     Json?
  ipAddress        String?
  userAgent        String?
  createdAt        DateTime          @default(now())

  // Relations
  profile          UserProfile       @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, activityType])
  @@index([createdAt])
  @@map("profile_activities")
}

// ===== 기존 User 모델에 추가할 관계 =====
// User 모델에 다음 관계 추가:
// profiles         UserProfile[]
// instantMeetings  InstantMeeting[]  @relation("creator")

// ===== 기존 Group 모델에 추가할 관계 =====
// Group 모델에 다음 관계 추가:
// profiles         UserProfile[]