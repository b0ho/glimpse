// 즉석 모임 자동 매칭 시스템을 위한 스키마 수정
// 기존 schema.prisma에 추가/수정할 내용

// ===== 수정된 즉석 모임 관련 테이블 =====

// 즉석 모임 (변경 없음)
model InstantMeeting {
  id                String                @id @default(cuid())
  code              String                @unique @db.VarChar(10)
  name              String
  creatorId         String
  location          Json?                 // {lat, lng, address}
  featureCategories String[]              // 사용할 특징 카테고리
  isActive          Boolean               @default(true)
  expiresAt         DateTime
  createdAt         DateTime              @default(now())

  // Relations
  creator           User                  @relation(fields: [creatorId], references: [id])
  participants      InstantParticipant[]
  matches           InstantAutoMatch[]
  matchAttempts     InstantMatchAttempt[]
  activityLogs      InstantActivityLog[]

  @@index([code])
  @@index([creatorId])
  @@index([expiresAt])
  @@map("instant_meetings")
}

// 즉석 참가자 (변경 없음)
model InstantParticipant {
  id               String                @id @default(cuid())
  userId           String                // 내부 추적용
  meetingId        String
  nickname         String                // 모임에서만 사용하는 닉네임
  joinedAt         DateTime              @default(now())
  leftAt           DateTime?
  isActive         Boolean               @default(true)

  // Relations
  user             User                  @relation(fields: [userId], references: [id])
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id])
  features         InstantParticipantFeatures?
  matches1         InstantAutoMatch[]    @relation("Participant1")
  matches2         InstantAutoMatch[]    @relation("Participant2")
  messages         InstantMessage[]
  matchAttempts    InstantMatchAttempt[]

  @@unique([userId, meetingId])
  @@index([meetingId, isActive])
  @@map("instant_participants")
}

// 참가자 특징 (신규)
model InstantParticipantFeatures {
  id                   String                @id @default(cuid())
  participantId        String                @unique
  myFeatures           Json                  // 내 특징
  lookingForFeatures   Json                  // 찾는 사람 특징
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  // Relations
  participant          InstantParticipant    @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@map("instant_participant_features")
}

// 자동 매칭 (수정)
model InstantAutoMatch {
  id               String                @id @default(cuid())
  meetingId        String
  participant1Id   String
  participant2Id   String
  matchScore       Float?                // 매칭 점수 (선택)
  chatRoomId       String                @unique @default(cuid())
  matchedAt        DateTime              @default(now())

  // Relations
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  participant1     InstantParticipant    @relation("Participant1", fields: [participant1Id], references: [id])
  participant2     InstantParticipant    @relation("Participant2", fields: [participant2Id], references: [id])
  messages         InstantMessage[]

  @@unique([participant1Id, participant2Id])
  @@index([meetingId])
  @@map("instant_auto_matches")
}

// 매칭 시도 로그 (신규)
model InstantMatchAttempt {
  id                  String                @id @default(cuid())
  meetingId           String
  participantId       String
  potentialMatches    Int                   // 가능한 매칭 수
  successfulMatches   Int                   // 성공한 매칭 수
  createdAt           DateTime              @default(now())

  // Relations
  meeting             InstantMeeting        @relation(fields: [meetingId], references: [id])
  participant         InstantParticipant    @relation(fields: [participantId], references: [id])

  @@index([participantId])
  @@index([createdAt])
  @@map("instant_match_attempts")
}

// 즉석 메시지 (변경 없음)
model InstantMessage {
  id                  String                @id @default(cuid())
  chatRoomId          String
  senderParticipantId String
  content             String                // 암호화된 내용
  messageType         MessageType           @default(TEXT)
  isRead              Boolean               @default(false)
  createdAt           DateTime              @default(now())

  // Relations
  match               InstantAutoMatch      @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  sender              InstantParticipant    @relation(fields: [senderParticipantId], references: [id])

  @@index([chatRoomId])
  @@index([createdAt])
  @@map("instant_messages")
}

// 활동 로그 (수정)
model InstantActivityLog {
  id               String                @id @default(cuid())
  userId           String                // 내부 추적용
  meetingId        String
  activityType     InstantActivityType
  activityData     Json?                 // 추가 데이터
  createdAt        DateTime              @default(now())

  // Relations
  user             User                  @relation(fields: [userId], references: [id])
  meeting          InstantMeeting        @relation(fields: [meetingId], references: [id])

  @@index([userId, meetingId])
  @@index([activityType])
  @@index([createdAt])
  @@map("instant_activity_logs")
}

// 활동 타입 열거형 (수정)
enum InstantActivityType {
  JOIN                // 모임 참가
  LEAVE               // 모임 나가기
  FEATURE_UPDATED     // 특징 업데이트 (변경)
  MATCH_CREATED       // 매칭 성사
  MESSAGE_SENT        // 메시지 전송
  REPORT              // 신고
  BLOCK               // 차단
}