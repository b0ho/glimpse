name: Deploy Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: 'ap-northeast-2'

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push server image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: glimpse-server
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging
    
    - name: Build, tag, and push web image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: glimpse-web
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./web
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging
    
    - name: Update ECS service (Server)
      run: |
        aws ecs update-service \
          --cluster glimpse-staging \
          --service glimpse-server-staging \
          --force-new-deployment
    
    - name: Update ECS service (Web)
      run: |
        aws ecs update-service \
          --cluster glimpse-staging \
          --service glimpse-web-staging \
          --force-new-deployment
    
    - name: Wait for services to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster glimpse-staging \
          --services glimpse-server-staging glimpse-web-staging

  # Run E2E Tests on Staging
  e2e-tests-staging:
    name: E2E Tests on Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      env:
        BASE_URL: ${{ secrets.STAGING_URL }}
        TEST_USER_PHONE: ${{ secrets.TEST_USER_PHONE }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: e2e-tests-staging
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Promote staging images to production
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Pull staging images
        docker pull $ECR_REGISTRY/glimpse-server:staging
        docker pull $ECR_REGISTRY/glimpse-web:staging
        
        # Tag as production
        docker tag $ECR_REGISTRY/glimpse-server:staging $ECR_REGISTRY/glimpse-server:production
        docker tag $ECR_REGISTRY/glimpse-web:staging $ECR_REGISTRY/glimpse-web:production
        
        # Push production tags
        docker push $ECR_REGISTRY/glimpse-server:production
        docker push $ECR_REGISTRY/glimpse-web:production
    
    - name: Update ECS service (Server)
      run: |
        aws ecs update-service \
          --cluster glimpse-production \
          --service glimpse-server-production \
          --force-new-deployment
    
    - name: Update ECS service (Web)
      run: |
        aws ecs update-service \
          --cluster glimpse-production \
          --service glimpse-web-production \
          --force-new-deployment
    
    - name: Wait for services to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster glimpse-production \
          --services glimpse-server-production glimpse-web-production
    
    - name: Send deployment notification
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Production deployment completed successfully! üöÄ'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Send failure notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Production deployment failed! ‚ùå'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}