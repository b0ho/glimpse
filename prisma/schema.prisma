// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id            String   @id @default(cuid())
  clerkId       String   @unique // Clerk 사용자 ID
  anonymousId   String   @unique // 익명 식별자
  nickname      String
  phoneNumber   String?  // 해시화된 전화번호
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  sentLikes     Like[]     @relation("LikeSender")
  receivedLikes Like[]     @relation("LikeReceiver")
  matches1      Match[]    @relation("MatchUser1")
  matches2      Match[]    @relation("MatchUser2")
  messages      Message[]
  groupMembers  GroupMember[]
  createdGroups Group[]   @relation("GroupCreator")
  subscription  Subscription?
  payments      Payment[]

  @@map("users")
}

// 그룹 모델
model Group {
  id            String    @id @default(cuid())
  name          String
  type          GroupType
  description   String?
  memberCount   Int       @default(0)
  maleCount     Int       @default(0)
  femaleCount   Int       @default(0)
  minimumMembers Int      @default(4)
  isMatchingActive Boolean @default(false)
  
  // 위치 정보 (선택적)
  latitude      Float?
  longitude     Float?
  address       String?
  
  expiresAt     DateTime? // 인스턴스 그룹용
  createdById   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계
  creator       User?        @relation("GroupCreator", fields: [createdById], references: [id])
  members       GroupMember[]
  likes         Like[]
  matches       Match[]

  @@map("groups")
}

// 그룹 멤버십
model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  // 관계
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

// 좋아요 시스템
model Like {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String
  groupId     String
  isAnonymous Boolean  @default(true)
  type        LikeType @default(NORMAL)
  createdAt   DateTime @default(now())

  // 관계
  fromUser    User     @relation("LikeSender", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("LikeReceiver", fields: [toUserId], references: [id], onDelete: Cascade)
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId, groupId])
  @@map("likes")
}

// 매칭 시스템
model Match {
  id            String    @id @default(cuid())
  user1Id       String
  user2Id       String
  groupId       String
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime?
  isActive      Boolean   @default(true)

  // 관계
  user1         User      @relation("MatchUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User      @relation("MatchUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([user1Id, user2Id, groupId])
  @@map("matches")
}

// 메시지 시스템
model Message {
  id        String      @id @default(cuid())
  matchId   String
  senderId  String
  content   String      // 암호화된 내용
  type      MessageType @default(TEXT)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // 관계
  match     Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender    User        @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// 구독 시스템
model Subscription {
  id          String           @id @default(cuid())
  userId      String           @unique
  plan        SubscriptionPlan
  status      SubscriptionStatus @default(ACTIVE)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // 관계
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// 결제 기록
model Payment {
  id            String        @id @default(cuid())
  userId        String
  stripePaymentIntentId String @unique
  amount        Int           // 원화 기준 (원 단위)
  currency      String        @default("KRW")
  type          PaymentType
  status        PaymentStatus @default(PENDING)
  productId     String?       // 구독 플랜 또는 좋아요 패키지 ID
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // 관계
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// 회사 인증
model CompanyVerification {
  id               String                    @id @default(cuid())
  userId           String
  companyName      String
  verificationMethod VerificationMethod
  status           VerificationStatus       @default(PENDING)
  submittedAt      DateTime                 @default(now())
  reviewedAt       DateTime?
  
  @@map("company_verifications")
}

// 열거형들
enum GroupType {
  OFFICIAL  // 공식 그룹 (회사/대학)
  CREATED   // 생성 그룹 (사용자 생성)
  INSTANCE  // 인스턴스 그룹 (일회성 이벤트)
  LOCATION  // 장소기반 그룹
}

enum GroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum LikeType {
  NORMAL    // 일반 좋아요
  SUPER     // 슈퍼 좋아요
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum SubscriptionPlan {
  FREE
  MONTHLY   // 월간 프리미엄
  YEARLY    // 연간 프리미엄
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  EXPIRED
}

enum PaymentType {
  SUBSCRIPTION  // 구독 결제
  LIKE_PACKAGE  // 좋아요 패키지
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum VerificationMethod {
  EMAIL
  DOCUMENT
  INVITE_CODE
  MANUAL
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}